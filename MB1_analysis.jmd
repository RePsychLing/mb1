Attach packages to be used
```{julia;label=packages}
using CSV            # read and write .csv files
using Gadfly
using DataFrames
using DataFramesMeta # dplyr-like operations
using MixedModels
using StatsBase      # basic statistics functions
```

Download and read the data.
```{julia;label=download}
mb1 = CSV.read(
    download("https://raw.githubusercontent.com/manybabies/mb1-analysis-public/master/processed_data/03_data_trial_main.csv"),
    missingstrings=["NA","N/A"],
    truestrings=["TRUE"],
    falsestrings=["FALSE"])
describe(mb1)
```
The `gender` variable should be `F`, `M`, or `missing` but some values are miscoded.
```{julia;label=gendervals}
countmap(mb1.gender)
```
Recode the levels of gender, add the `item` variable, center the `age_mo`, and relevel the `method` and `age_group` to match with the R data frame.
Drop observations with a missing response (`looking_time`).
```{julia;label=genderrecode}
mb1a = @linq mb1 |>
    transform(gender = recode(:gender, "0"=>missing, "MALE"=>"M", "FEMALE"=>"F"),
              item = string.(:stimulus_num, :trial_type),
              age_mo = :age_mo .- mean(:age_mo),
              method = levels!(categorical(:method), ["singlescreen", "eyetracking", "hpp"]),
              age_group = levels!(categorical(:age_group), ["3-6 mo", "6-9 mo", "9-12 mo", "12-15 mo"])) |>
    where(.!ismissing.(:looking_time));
disallowmissing!(mb1a, error=false);
describe(mb1a)
```
A histogrm of the `looking_time` shows the thresholding effect.
```{julia;label=lookingtimeplot}
plot(x=mb1a.looking_time, Geom.histogram())
```

Fit an initial linear mixed-effects model
```{julia;label=mixed}
m1form = @formula log(looking_time) ~ trial_type * method +
                   trial_type * trial_num +
                   age_mo * trial_num +
                   trial_type * age_mo * nae +
                   (1 | subid_unique) +
                   (1 | item) + 
                   (1 | lab);
m1 = fit(MixedModel, m1form, mb1a, REML=true)
```
The thresholding of the response produces some unusual patterns in the residuals versus fitted values.
```{julia;label=resids}
plot(x=fitted(m1), y=residuals(m1), Geom.density2d())
```

Fit the authors' intended maximal mixed-effects model. We switch to ML. 

```{julia;label=mixed2}
m2form = @formula log(looking_time) ~ trial_type * method +
                   trial_type * trial_num +
                   age_mo * trial_num +
                   trial_type * age_mo * nae +
                   (1 + trial_type * trial_num | subid_unique) +
                   (1 + method + age_mo * nae | item) +
                   (1 + trial_type * age_mo | lab);
m2 = fit(MixedModel, m2form, mb1a, REML=false)

m2.rePCA
```
According to `rePCA` there is overparameterization for each of the three random factors. 
Let's go with zero-corr parameter LMM. 

Questions

+ Does this work correctly for the combination of factor and covariate variables? 
+ Should I replace factors with corresponding columns of design matrix?

```{julia;label=mixed3}
m3form = @formula log(looking_time) ~ trial_type * method +
                   trial_type * trial_num +
                   age_mo * trial_num +
                   trial_type * age_mo * nae +
                   zerocorr(1 + trial_type * trial_num | subid_unique) +
                   zerocorr(1 + method + age_mo * nae | item) +
                   zerocorr(1 + trial_type * age_mo | lab);
m3 = fit(MixedModel, m3form, mb1a, REML=false)

m3.rePCA
```

Looks like quite a few VCs have very small values. Drop interaction terms and check LRT.


```{julia;label=mixed3}
m4form = @formula log(looking_time) ~ trial_type * method +
                   trial_type * trial_num +
                   age_mo * trial_num +
                   trial_type * age_mo * nae +
                   zerocorr(1 + trial_type | subid_unique) +
                   zerocorr(1 + method + nae | item) +
                   zerocorr(1 + age_mo | lab);
m4 = fit(MixedModel, m4form, mb1a, REML=false)

m4.rePCA
```

This looks ok. So let's expand with CPs again. 
Intermediate LMM showed that CP is not supported for `Subject`.

```{julia;label=mixed3}
m5form = @formula log(looking_time) ~ trial_type * method +
                   trial_type * trial_num +
                   age_mo * trial_num +
                   trial_type * age_mo * nae +
                   zerocorr(1 + trial_type | subid_unique) +
                   (1 + method + nae | item) +
                   (1 + age_mo | lab);
m5 = fit(MixedModel, m5form, mb1a, REML=false)

m5.rePCA
```

That looks good and there are sizeable item-related correlation parameters. 


